package ru.mos.efp.efp.drools.rpr;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.namespace.NamespaceContext;

import org.xml.sax.InputSource; 
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class XmlService {
    private String xml;
    private Document doc;
    private XPath xpath;
    
    private class SimpleNamespaceContext implements NamespaceContext {

	    private final Map<String, String> PREF_MAP = new HashMap<String, String>();

	    public SimpleNamespaceContext(final Map<String, String> prefMap) {
	        PREF_MAP.putAll(prefMap);       
	    }

	    public String getNamespaceURI(String prefix) {
	        return PREF_MAP.get(prefix);
	    }

	    public String getPrefix(String uri) {
	        throw new UnsupportedOperationException();
	    }

	    public Iterator getPrefixes(String uri) {
	        throw new UnsupportedOperationException();
	    }

	}

    public XmlService(String xml) {
        System.out.println("XML: "+xml);
       /* xml = xml.replace("&lt;","<");
        System.out.println("XML1: "+xml);
        xml = xml.replace("&gt;",">");
        System.out.println("XML2: "+xml);*/
        
        this.xml = xml;
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        // dbFactory.setNamespaceAware(true);
        try {
		    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		    doc = dBuilder.parse(new InputSource(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8))));
        } catch (Exception ex){
            System.out.println("Error on parse XML: " + ex);
        }
		XPathFactory xpathfactory = XPathFactory.newInstance();
        xpath = xpathfactory.newXPath();
        HashMap<String, String> prefMap = new HashMap<String, String>() {{
            put("ns1", "http://asguf.mos.ru/rkis_gu/coordinate/v6/");
        }};
        SimpleNamespaceContext ctx = new SimpleNamespaceContext(prefMap);
        // xpath.setNamespaceContext(ctx);
    }
    
    public String xpathString(String path){
        String res = "";
        System.out.println("xpathString path:" + path);
        try{
            if (doc!=null){
                XPathExpression expr = xpath.compile(path);
                res = (String)expr.evaluate(doc, XPathConstants.STRING);
                System.out.println("xpathString res:" + res);
            }
        } catch(XPathExpressionException e){
            System.out.println("Error on xpathString " + e);
        }
        
        System.out.println("xpathString ret:" + res);
        
        return res;
    }
    
    public int xpathNumber(String path){
        Double res = 0.0;
        System.out.println("xpathNumber path:" + path);
        try{
            if (doc!=null){
                XPathExpression expr = xpath.compile(path);
                res = (Double)expr.evaluate(doc, XPathConstants.NUMBER);
                System.out.println("xpathNumber res:" + res);
            }
        } catch(XPathExpressionException e){
            System.out.println("Error on xpathNumber " + e);
        }
        
        System.out.println("xpathNumber return:" + res.intValue());
        
        return res.intValue();
    }
    
    public List<String> xpathStringList(String path){
        List<String> res = new LinkedList<>();
        try{
            if (doc!=null){
                XPathExpression expr = xpath.compile(path);
                NodeList list = (NodeList)expr.evaluate(doc, XPathConstants.NODESET);
                for (int i = 0; i < list.getLength(); i++) {
                    res.add(list.item(i).getNodeValue());
                }
            }
        } catch(XPathExpressionException e){
            
        }
        
        return res;
    }
    
    

}